// <auto-generated />
using EventBooking.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace EventBooking.Web.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20171121135040_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EventBooking.Core.Entities.DatabaseModels.Event", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDateTime");

                    b.Property<Guid?>("ImageID");

                    b.Property<int>("MaxNumberOfParticipants");

                    b.Property<string>("Name");

                    b.Property<string>("Place");

                    b.Property<DateTime>("StartDateTime");

                    b.HasKey("ID");

                    b.HasIndex("ImageID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("EventBooking.Core.Entities.DatabaseModels.Image", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Data");

                    b.Property<int>("Height");

                    b.Property<int>("Length");

                    b.Property<byte[]>("Name");

                    b.Property<int>("Width");

                    b.HasKey("ID");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("EventBooking.Core.Entities.DatabaseModels.Rights", b =>
                {
                    b.Property<string>("RightsModelName")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanChangeRights");

                    b.Property<bool>("CanCreateEvents");

                    b.Property<bool>("CanDeleteEvents");

                    b.Property<bool>("CanDeleteUser");

                    b.Property<bool>("CanSeeUsers");

                    b.Property<bool>("CanUpdateEventDescription");

                    b.Property<bool>("CanUpdateEventParticipants");

                    b.Property<bool>("CanUpdateUser");

                    b.HasKey("RightsModelName");

                    b.ToTable("Rights");
                });

            modelBuilder.Entity("EventBooking.Core.Entities.DatabaseModels.User", b =>
                {
                    b.Property<string>("Mail")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("RightsModelName");

                    b.HasKey("Mail");

                    b.HasIndex("RightsModelName");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("EventBooking.Core.Entities.DatabaseModels.Participant", b =>
                {
                    b.HasBaseType("EventBooking.Core.Entities.DatabaseModels.User");

                    b.Property<Guid?>("EventID");

                    b.Property<string>("FaceBookLink");

                    b.Property<string>("Phone");

                    b.HasIndex("EventID");

                    b.ToTable("Participant");

                    b.HasDiscriminator().HasValue("Participant");
                });

            modelBuilder.Entity("EventBooking.Core.Entities.DatabaseModels.Guide", b =>
                {
                    b.HasBaseType("EventBooking.Core.Entities.DatabaseModels.Participant");

                    b.Property<Guid?>("EventID1");

                    b.Property<Guid?>("ImageID");

                    b.HasIndex("EventID1");

                    b.HasIndex("ImageID");

                    b.ToTable("Guide");

                    b.HasDiscriminator().HasValue("Guide");
                });

            modelBuilder.Entity("EventBooking.Core.Entities.DatabaseModels.Event", b =>
                {
                    b.HasOne("EventBooking.Core.Entities.DatabaseModels.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageID");
                });

            modelBuilder.Entity("EventBooking.Core.Entities.DatabaseModels.User", b =>
                {
                    b.HasOne("EventBooking.Core.Entities.DatabaseModels.Rights", "Rights")
                        .WithMany()
                        .HasForeignKey("RightsModelName");
                });

            modelBuilder.Entity("EventBooking.Core.Entities.DatabaseModels.Participant", b =>
                {
                    b.HasOne("EventBooking.Core.Entities.DatabaseModels.Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventID");
                });

            modelBuilder.Entity("EventBooking.Core.Entities.DatabaseModels.Guide", b =>
                {
                    b.HasOne("EventBooking.Core.Entities.DatabaseModels.Event")
                        .WithMany("Guides")
                        .HasForeignKey("EventID1");

                    b.HasOne("EventBooking.Core.Entities.DatabaseModels.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageID");
                });
#pragma warning restore 612, 618
        }
    }
}
